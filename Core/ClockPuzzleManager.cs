using UnityEngine;
using System.Collections.Generic;
using System.Linq;

public class ClockPuzzleManager : MonoBehaviour
{
    [Header("Puzzle Settings")]
    public bool useClockPuzzle = true;           // –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —Å —á–∞—Å–∞–º–∏

    [Header("Auto-find clocks")]
    public bool autoFindClocks = true;           // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –≤—Å–µ —á–∞—Å—ã –≤ —Å—Ü–µ–Ω–µ

    [Header("Manual clock assignment")]
    public ClockController[] manualClocks;       // –ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–ø–æ–∏—Å–∫

    private ClockController[] allClocks;
    private Dictionary<ClockController.ClockColor, int> colorToDigitMap;
    private ClockController.ClockColor[] codeSequence;
    private string generatedCode;

    void Start()
    {
        if (useClockPuzzle)
        {
            InitializeClocks();
            GenerateClockPuzzle();
        }
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —á–∞—Å–æ–≤ –≤ —Å—Ü–µ–Ω–µ
    /// </summary>
    void InitializeClocks()
    {
        if (autoFindClocks)
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —á–∞—Å—ã –≤ —Å—Ü–µ–Ω–µ
            allClocks = FindObjectsOfType<ClockController>();
        }
        else
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä—É—á–Ω—É—é –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–∞—Å—ã
            allClocks = manualClocks;
        }

        if (allClocks.Length == 0)
        {
            Debug.LogError("ClockPuzzleManager: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–∏—Ö —á–∞—Å–æ–≤ –≤ —Å—Ü–µ–Ω–µ!");
            useClockPuzzle = false;
            return;
        }

        Debug.Log($"ClockPuzzleManager: –ù–∞–π–¥–µ–Ω–æ {allClocks.Length} —á–∞—Å–æ–≤ –≤ —Å—Ü–µ–Ω–µ");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —á–∞—Å—ã –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        var foundColors = allClocks.Select(c => c.GetClockColor()).Distinct().ToList();
        Debug.Log($"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ —á–∞—Å–æ–≤: {string.Join(", ", foundColors)}");

        // –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Å–æ–≤
        Debug.Log("=== –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Å–∞—Ö ===");
        for (int i = 0; i < allClocks.Length; i++)
        {
            var clock = allClocks[i];
            Debug.Log($"–ß–∞—Å—ã #{i + 1}: {clock.name} - –¶–≤–µ—Ç: {clock.GetClockColor()} - HourHand: {(clock.hourHand != null ? "OK" : "–ù–ï –ù–ê–°–¢–†–û–ï–ù!")}");
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É —Å —á–∞—Å–∞–º–∏
    /// </summary>
    void GenerateClockPuzzle()
    {
        if (!useClockPuzzle || allClocks.Length == 0) return;

        // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        generatedCode = GenerateRandomCode();

        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ —á–∞—Å–æ–≤
        var availableColors = allClocks.Select(c => c.GetClockColor()).Distinct().ToList();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–≤–µ—Ç–æ–≤
        if (availableColors.Count < 6)
        {
            Debug.LogError($"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —á–∞—Å–æ–≤! –ù–∞–π–¥–µ–Ω–æ: {availableColors.Count}, –Ω—É–∂–Ω–æ: 6");
            Debug.LogError($"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: {string.Join(", ", availableColors)}");
            Debug.LogError("–î–æ–±–∞–≤—å—Ç–µ —á–∞—Å—ã –¥—Ä—É–≥–∏—Ö —Ü–≤–µ—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏.");
            useClockPuzzle = false;
            return;
        }

        // 3. –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 6 —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        var shuffledColors = new List<ClockController.ClockColor>(availableColors);

        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤
        for (int i = 0; i < shuffledColors.Count; i++)
        {
            var temp = shuffledColors[i];
            int randomIndex = Random.Range(i, shuffledColors.Count);
            shuffledColors[i] = shuffledColors[randomIndex];
            shuffledColors[randomIndex] = temp;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 —Ü–≤–µ—Ç–æ–≤ (–≤—Å–µ —Ä–∞–∑–Ω—ã–µ)
        codeSequence = shuffledColors.Take(6).ToArray();
        colorToDigitMap = new Dictionary<ClockController.ClockColor, int>();

        // 4. –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ü–≤–µ—Ç—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ü–∏—Ñ—Ä—É –∏–∑ –∫–æ–¥–∞
        for (int i = 0; i < 6; i++)
        {
            int digit = int.Parse(generatedCode[i].ToString());
            colorToDigitMap[codeSequence[i]] = digit;
        }

        // 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—ã –Ω–∞ –≤—Å–µ—Ö —á–∞—Å–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É
        SetAllClockTimes();

        // 6. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ GameManager
        GameManager.Instance.safeCode = generatedCode;

        Debug.Log($"=== –ì–û–õ–û–í–û–õ–û–ú–ö–ê –° –ß–ê–°–ê–ú–ò –°–û–ó–î–ê–ù–ê ===");
        Debug.Log($"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥: {generatedCode}");
        Debug.Log($"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤: {string.Join(" ‚Üí ", codeSequence.Select(c => c.ToString()))}");
        Debug.Log($"–ú–∞–ø–ø–∏–Ω–≥ —Ü–≤–µ—Ç‚Üí—Ü–∏—Ñ—Ä–∞: {string.Join(", ", colorToDigitMap.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    /// </summary>
    string GenerateRandomCode()
    {
        string code = "";
        for (int i = 0; i < 6; i++)
        {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 9 (—á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —á–∞—Å–∞—Ö)
            code += Random.Range(1, 10).ToString();
        }
        Debug.Log($"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–æ–¥: {code}");
        return code;
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞ –≤—Å–µ—Ö —á–∞—Å–∞—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –º–∞–ø–ø–∏–Ω–≥—É
    /// </summary>
    void SetAllClockTimes()
    {
        Debug.Log("=== –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —á–∞—Å–∞—Ö ===");

        foreach (var clock in allClocks)
        {
            var clockColor = clock.GetClockColor();

            if (colorToDigitMap.ContainsKey(clockColor))
            {
                int hourToSet = colorToDigitMap[clockColor];
                clock.SetHourInstant(hourToSet);
                Debug.Log($"‚úÖ –ß–∞—Å—ã {clockColor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {hourToSet} —á–∞—Å (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ)");
            }
            else
            {
                // –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ, —Å—Ç–∞–≤–∏–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
                int randomHour = Random.Range(1, 10);
                clock.SetHourInstant(randomHour);
                Debug.Log($"üîÑ –ß–∞—Å—ã {clockColor} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {randomHour} —á–∞—Å (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –∫–æ–¥–µ)");
            }
        }
    }

    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ
    /// </summary>
    public string GetColorSequenceText()
    {
        if (!useClockPuzzle || codeSequence == null)
            return "SAFE CODE:\n" + GameManager.Instance.safeCode;

        string colorText = "FIND THE CLOCKS IN ORDER:\n\n";

        for (int i = 0; i < codeSequence.Length; i++)
        {
            var clock = allClocks.FirstOrDefault(c => c.GetClockColor() == codeSequence[i]);
            if (clock != null)
            {
                colorText += $"{i + 1}. {clock.GetColorName()}\n";
            }
        }

        colorText += "\nRead the hour on each clock";
        return colorText;
    }

    /// <summary>
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –∫–∞–∫ –º–∞—Å—Å–∏–≤ Color –¥–ª—è UI
    /// </summary>
    public Color[] GetColorSequenceForUI()
    {
        if (!useClockPuzzle || codeSequence == null) return new Color[0];

        Color[] colors = new Color[codeSequence.Length];
        for (int i = 0; i < codeSequence.Length; i++)
        {
            var clock = allClocks.FirstOrDefault(c => c.GetClockColor() == codeSequence[i]);
            colors[i] = clock != null ? clock.GetUIColor() : Color.white;
        }

        return colors;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
    /// </summary>
    public bool IsPuzzleActive()
    {
        return useClockPuzzle && allClocks != null && allClocks.Length > 0;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    /// </summary>
    public string GetCorrectCode()
    {
        return generatedCode;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å–æ–≤
    [ContextMenu("Debug: Show Clock States")]
    public void DebugShowClockStates()
    {
        if (allClocks == null) return;

        Debug.Log("=== –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å–æ–≤ ===");
        foreach (var clock in allClocks)
        {
            Debug.Log($"{clock.GetColorName()} —á–∞—Å—ã: {clock.GetCurrentHour()} —á–∞—Å");
        }

        if (colorToDigitMap != null)
        {
            Debug.Log("=== –ú–∞–ø–ø–∏–Ω–≥ —Ü–≤–µ—Ç ‚Üí —Ü–∏—Ñ—Ä–∞ ===");
            foreach (var kvp in colorToDigitMap)
            {
                Debug.Log($"{kvp.Key} ‚Üí {kvp.Value}");
            }
        }

        Debug.Log($"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥: {generatedCode}");
        Debug.Log($"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {string.Join(" ‚Üí ", codeSequence?.Select(c => c.ToString()) ?? new string[0])}");
    }
}